Ansible version: 2.7.0



1) What is Ansible and what are ansible Features?

		Is a toll that provides
			IT Automation	- Instructions are written to automate the IT professional work
			Configuration Management	-	Consistency of all systems in the infrastructure is maintained
			Automatic Deploments	-	Applications are deployed automatically on a variety of environments
Features:
	Agentless: No need for agent installation and management
	Built on top of python and hence provide a lot of python's functionality
	Uses SSH for secure connection
	Follow PUSH based architecture for sending confifurations
	Idempotent

2) How Ansible Works?
There are many similar automation tools available like Puppet, Capistrano, Chef, Salt, Space Walk etc, but Ansible categorize into two types of server: controlling machines and nodes.
The controlling machine, where Ansible is installed and Nodes are managed by this controlling machine over SSH. The location of nodes are specified by controlling machine through its inventory.
The controlling machine (Ansible) deploys modules to nodes using SSH protocol and these modules are stored temporarily on remote nodes and communicate with the Ansible machine through a JSON connection over the standard output.
Ansible is agent-less, that means no need of any agent installation on remote nodes, so it means there are no any background daemons or programs are executing for Ansible, when it’s not managing any nodes.
Ansible can handle 100’s of nodes from a single system over SSH connection and the entire operation can be handled and executed by one single command ‘ansible’. But, in some cases, where you required to execute multiple commands for a deployment, here we can build playbooks.
Playbooks are bunch of commands which can perform multiple tasks and each playbooks are in YAML file format.



3) What is Ansible Tower?

Ansible Tower is GUI based dashboard which provides a status summary of all hosts and jobs including successful and failure playbook runs, define inventories, list recent jobs.

Benefits:

Role BAsed access control
push-button deployment
REST API
Centralized logging and auditing




4) What is Host Inventory?
    It will contain list of your hosts grouped together
	Default location is /etc/ansible/hosts

5) What are Ansible Modules:

	Modules (also referred as task plugins or library plugins) are the ones which actually get executed inside the playbook
	These are the scripts that come packaged with Ansible and perform some kind of action on host
	
	EX:
	apt: Installs or removes packages using the apt package manager
	copy: copies a file from local machines to hosts
	file: sets the attribute of a file, symlink, or directory
	service: start, stop and restart the service
	

6) Which Package manager used to debian/RHEL based system?
 
 So basically I would like to say that I have used the various packages using 
 
Debain ->  apt-get
RHEL - > yum


7) what is the experiance on Ansible playbook?

Basically i have created the various kind of ansible playbooks for the deployment and INstallation of tomcat and apart from that I am also good experiance in some of the orchesation using ansible by writing the various YAML scripts for the orchestration and as well as
the installation of java, node JS and TOmcat.also working on some of the various kinds of deployments like the blue green deployment of the application on the target machines and also we are using ansible tower for the various kinds of linux activities so we were actually
using the workflows inside in ansible tower so that we can actually deploy this applications on multiple machines.

8) Have you ever worked with anisble and dynamic inventory type?

Yes, I have created the dynamic inventory in the ansible and treated for the amazon  API and have been using dynamic inventory which will automatically populate the various machine names from the amazon, so that basically we can have dynamic DNS with Amazon API 
and route 53. So that dynamic inventory will be created, will actually  have IP addresses of each machine which will be dynamically added to the ansible inventory, so that you don't have do manually for each and every machine.

One of the main reason, why we need dynamic inventory required is that we want to automatically get the IP addresses of the machine inside the stack

script: Jenkins build script for create dynamic inventory for EC2 instances

we can pass the following parameters while running the jenkins job

export AWS_ACCESS_KEY_ID=$aws_access_key
export AWS_SECRET_ACCESS_KEY=$aws_secret_key
export AWS_REGION=$region

mkdir inventory

we need to download the following two files on the perticular host 

wget <ansible github repository url for ec2.py file> - Inventory script
wget <ansible github repository url for ec2.ini file> - configuration file inventory script

chmod +x ec2.py - make it executable
./ec2.py --list - list the output servers






9) How does the Inventory file listen like which server it belongs to ?

BAsically we will have various types of dynamic inventory files which will be utilized on the amazon CLI and we will be using the access key and secret access key and then finally we will be having various extra variables and you will be having docker update YAML
and the variable host and then we will have tag, host and will have key file management and user management.

10) What is Ansible Role?
Ansible can interact with configured clients from the command line with the ansible command, and how you can automate configuration with playbooks run through the ansible-playbook command.
The first step in creating a role is creating its directory structure. To create the base directory structure, we’re going to use a tool bundled with Ansible called ansible-galaxy:
$ ansible-galaxy init azavea.packer azavea.packer was created successfully


11) what is the difference between ansible playbook and scripts like shell?

ansible playbooks will have various kinds of ansible directives and the modules which are used which are already written in python and ansible will be using YAML syntax
shell scripts which will have like simple callabacks to various stuffs

12) What is forks in ansible?




-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible Adhoc Commands:

	ansible all -s -n shell -a 'uptime'		                 -	Uptime of all the machines
	ansible all -s -n shell -a 'date'		                 -	Date of all the machines
	ansible all -s -n shell -a '/cat/etc/redhat-release'     -	redhat release of all the machines
	ansible all -s -n shell -a 'mount'		                 -	Kind of mount on all the machines
	ansible all -s -n shell -a 'service sshd status'		 -	check the service status on all the machines
    ansible all -m ping		                                 -	To check the server ping status
    ansible webservers -m command -a "ls"	                 -	If you want to use the ping module to ping  hoall the host difined in the inventory (this will basically list all the modules present and it will ping) 
    ansible -i inventory all - m command -a "iptables -F" --become --ask-become-pass	      -	If you want to flush iptables rules in the inventory
    ansible all -m setup	                                 -	If you want anisble to collect gather facts from host in JSON format
    ansible-doc setup	                                     -	extract the document about t
    ansible all -l webserver -m shell -a "mkdir /tmp/yug" -b -	Create folder in webserver directory
    ansible all -l webserver -m apt -a "install_recommends=yes name=apache2 state=latest" -b	-	installing apache2
	ansible all -l appserver -m yum -a "name=httpd state=installed" -b -K                       - installing httpd
	ansible ubantu -m setup -a "filter=*os*"                 -  Check the operating system for the serrver
    ansible-doc yum	                                         - Can check how yum can be used
	ansible dev -m  ping	                                 - check the server connection
    ansible dev -i hosts -u <username> -m setup
    ansible dev -i hosts -u <username> -m yum -a "name=httpd state=present" - b
	ansible dev -m copy -a "src=<> dest=<>"                  - copy the file from 1 location to another location
	ansible -m debug -a "var=hostvars['hostname']" localhost - To see Inventory vars defined for my host
	ansible all -a "df -h"                                   - To check the disk space of the server
	ansible all -a "free -m"                                 -  To check the free memory of the server
	ansible all -m file -a "dest=<> mode=755 state=<>"        - TO change the file permissions, create/delete directory
	ansible -a "netstat -an" webservers                      - To check listening ports
	
-i - for inventory
-u - user
-m - module
-a - for arguments
-b - run the adhoc commands with root user	


Ansible Playbook Commands:

ansible-playbook  <file name> --syntax-check    - syntax check
ansible-playbook <file name> --list-tasks       - to check the tasks
ansible-playbook <file name>                    - to Run the playbook
ansible-playbook --check <YAML file anme>  - TO check the machine desired state
ansible-playbook -v <YAML file name>     - to display the playbook result including output
ansible-playbook -vvvv <YAML file name>     - to give every minor details for each task


Hosts And Users:
For each play in a playbook, you get to choose which machines in your infrastructure to target and which remote user to complete the tasks. To include hosts in Ansible inventory, we will be using the IP addresses of the host machines.

Generally the hosts are a list one or more groups or host patterns, separated by colons. The remote user is just the name of the user account.

Variables:
Ansible uses variables which are defined previously to enable more flexibility in playbooks and roles. They can be used to loop through a set of given values, access various information like the host name of a system and replace certain strings in templates with specific values.

Ansible already defines a rich set of variables, individual for each system. Whenever Ansible will run on a system, all facts and information about the system are gathered and set as variables.

But there is a rule for naming variables. Variable names should be letters, numbers, and underscores. Variables should always start with a letter. E.g. wamp_21, port5 is valid variable names, whereas 01_port, _server are invalid.

Tasks:
Tasks allow you to break up bits of configuration policy into smaller files. Task includes pull from other files. Tasks in Ansible go with pretty much the English meaning of it.

E.g: Install <package_name>, update <software_name> etc.

Handlers:
Handlers are just like regular tasks in an Ansible playbook, but are only run if the Task contains a notify directive and also indicates that it changed something. For example, if a config file is changed, then the task referencing the config file may notify a service restart handler.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible playbook scripts:




1) Automating AWS EC2 instance creating using Ansible:

1) Create security group 
2) Create EC2 instance
3) it will wait to keep ssh to become active on the instance, keeping this play book open until the instance is up 

from Putty :

using playbook : 

This will create custom security group and spin 1 instance which is based on the count

- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
      - name: create a security group inus-east-2
        ec2_group:
          name: dmz
          description: an example ec2 group
          region: us-east-2
          aws_access_key: "AKIAIWJUADQPQB16LCFI"
          aws_secret_key: "NCMx885+nNU51sKuprQeZeVsU9arRZc7hAX7Itez"
          rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
        register: security_group

- name: Provision/create ec2 instance
        ec2:
          aws_access_key: "AKIAIWJUADQPQB16LCFI"
          aws_secret_key: "NCMx885+nNU51sKuprQeZeVsU9arRZc7hAX7Itez"
          image: ami-caaf84af
          wait: yes
          instance_type: t2.micro
          group_id: security_group.group_id
          region: us-east-2
          count_tag:
            Name: apacheserver
VPC_subnet_id: subnet-9487887
		Assign_public_ip: yes
          exact_count: 1
        register: ec2

- name: create RDS instance
        rds:
         command: create
         region: us-east-2
         instance_name: infinityppdatabase
         db_engine: MySQL
         size: 20 # determines the storage size in GB
         instance_type: db.t2.micro
         username: mysql_admin
         password: 1nsecure
         tags:
           Environment: testing
           Application: cms


To run playbook :

Ansible-playbook ec2creating.yml


2) 
------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible with Vagrant

1) Vagrant init centos/7 - to create vagrant file
2) update the vagrant file, make the SSH connection to false to use the same SSH key for all servers and give howmany servers you want to create
3) vagrant ssh-config - to check the details for the servers, take the identityfile details
4) update the ansible config file with identityfile details and user as vagrant, inventory as host
5) update the host file with all server details 
6) vagrant up - will make the all servers up and running

--------------------------------------------------------------------------------------------------------------------------
Ansible Vault:

Ansible Vault is a feature of ansible that allows you to encrypt or decrypt sensitive data such as passwords or keys in encrypted files, rather than as plaintext in playbooks or roles.

ansible-valut create valut.yml     -> create new encrypted file
ansible-valut encrypt passowrd.txt -> encrypt the existing file
ansible-vault view password.txt    -> To view the unencrypted content of the file
ansible-vault edit password.txt    -> To edit the encrypted file
ansible-vault rekey foo.yml bar.yml baz.yml   -> To change the vault password of the vault encrypted file
ansible-vault decrypt foo.yml bar.yml baz.yml -> To decrypt the encrypted file

Suppose if you have any YAMl file has sensitive data like Database password then follow the instructions to encrypt

Ex: playbook.yml
mysql_root_db_pass: dbpass

1) create new vault file inside the variable folder and place the sensitive content in that file by using "vault_" keyword
 valut_mysql_root_db_pass: dbpass
 
2) update the playbook yml file with encrypted variable name
mysql_root_db_pass: "{{ valut_mysql_root_db_pass }}"

3) Run the playbook with --ask-valut-pass
ansible-playbook playbook.yml --ask-valut-pass

2nd way:

1) place the password on valut text file
echo dbpass > ~/.valut_pass.txt
2) chnage the permission to the file
chmod 0600 !$
3) execute ansible playbook
ansible-playbook playbook.yml --valut-password-file ~/.valut_pass.txt

3rd way:

1) 
1) place the password on valut text file
echo dbpass > ~/.valut_pass.txt
2) chnage the permission to the file
chmod 0600 !$
3) update the ansible.cfg file with below value
valut_password_file = ~/.valut_pass.txt
4) run the playbook without passing any extra parameters
ansible-playbook playbook.yml

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




